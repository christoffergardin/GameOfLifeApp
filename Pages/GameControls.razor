<div class="game-controls">
    @if (!_isRunning)
    {
        <button class="start-btn" @onclick="StartGame">Start</button>
    }
    else
    {
        <button class="stop-btn" @onclick="StopGame">Stop</button>
    } 
    <button class="reset-btn" @onclick="ResetGame">Reset</button>
</div>


<style>
    .game-controls {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .game-controls button {
        margin: 0 10px;
        padding: 12px 24px; 
        font-size: 18px; 
        cursor: pointer;
        border: none;
        color: white;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        border-radius: 4px;
        transition: all 0.4s;
        box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1); 
    }

    .game-controls button:hover {
        transform: scale(1.05); 
    }

    .game-controls button:active {
        transform: scale(0.95);
    }

    .start-btn {
        background-color: #4CAF50; 
    }

    .start-btn:hover {
        background-color: #45a049; 
    }

    .stop-btn {
        background-color: #f44336; 
    }

    .stop-btn:hover {
        background-color: #d32f2f; 
    }

    .reset-btn {
        background-color: #0099cc;
    }

    .reset-btn:hover {
        background-color: #0077b3; 
    }
</style>


@code {
    
    //Binding, pass data from a parent to this child
    [Parameter]
    public EventCallback OnStart { get; set; }
    
    [Parameter]
    public EventCallback OnStop { get; set; }
    
    [Parameter]
    public EventCallback OnReset { get; set; }

    private bool _isRunning = false;

    private void StartGame()
    {
        _isRunning = true;
        OnStart.InvokeAsync();
    }

    private void StopGame()
    {
        _isRunning = false;
        OnStop.InvokeAsync();
    }

    private void ResetGame()
    {
        _isRunning = false;
        OnReset.InvokeAsync();
    }
}