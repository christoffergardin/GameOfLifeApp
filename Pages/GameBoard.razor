@using GameOfLifeApp.Models

<div class="game-board">
    @for (int i = 0; i < Rows; i++)
    {
        var currentRow = i;  
        <div class="game-row">
            @for (int j = 0; j < Columns; j++)
            {
                var currentColumn = j;  
                var cell = _board.GetCell(currentRow, currentColumn);
                <div class="game-cell @(cell.IsAlive ? "alive" : "dead")" @onclick="() => ToggleCellState(currentRow, currentColumn)"></div>
            }
        </div>
    }
</div>

<style>
    .game-board {
        display: grid;
        grid-template-columns: repeat(@Columns, 22px);  
        border: 1px solid #ddd; 
        box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);  
        padding: 10px; 
    }
    .game-row {
        display: contents;  
    }
    .game-cell {
        width: 20px;
        height: 20px;
        border: 1px solid #ccc;
        cursor: pointer;
        border-radius: 3px; 
        margin: 1px;  
        transition: background-color 0.3s; 
    }
    .game-cell:hover {
        border: 1px solid #aaa; 
    }
    .game-cell.alive {
        background-color: #006400;  
        background-image: linear-gradient(135deg, #006400, #008000);  
    }
    .game-cell.dead {
        background-color: #f0f0f0; 
    }
</style>

@code {
    
    private Board _board;
    private const int Rows = 20;
    private const int Columns = 20;

    protected override void OnInitialized()
    {
        _board = new Board(Rows, Columns, new GameOfLifeRules());
    }

    private void ToggleCellState(int row, int column)
    {
        if (row < 0 || row >= Rows || column < 0 || column >= Columns)
        {
            Console.WriteLine($"Invalid coordinates: ({row}, {column})");
            return;
        }
    
        var cell = _board.GetCell(row, column);
        _board.UpdateCellState(row, column, !cell.IsAlive);
        StateHasChanged();
    }
    
    public void AdvanceToNextGeneration()
    {
        _board.AdvanceToNextGeneration();
        StateHasChanged();
    }

    public void ResetBoard()
    {
        _board = new Board(Rows, Columns, new GameOfLifeRules());
        StateHasChanged();
    }
}